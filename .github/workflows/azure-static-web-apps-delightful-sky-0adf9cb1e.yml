name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main-3
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main-3

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false

      # Set up Node.js environment with cache pointing to the subdirectory
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'sd/package-lock.json'

      # Install dependencies in the correct directory
      - name: Install dependencies
        run: npm install
        working-directory: ./sd

      # Run Jest tests with coverage and JSON output
      - name: Run tests with coverage
        id: tests
        run: npm test -- --ci --coverage --maxWorkers=4 --json --outputFile test-results.json --coverageReporters=json-summary || true
        working-directory: ./sd
        continue-on-error: true
        env:
          CI: true

      # Check coverage percentage from coverage report
      - name: Check code coverage
        id: coverage_check
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const coveragePath = path.join(process.env.GITHUB_WORKSPACE, 'sd', 'coverage', 'coverage-summary.json');
            let deploy_allowed = false;
            const required_coverage = 80; // 80% coverage threshold

            try {
              if (!fs.existsSync(coveragePath)) {
                core.warning(`Coverage file not found at ${coveragePath}`);
                core.setOutput('deploy_allowed', 'false');
                return;
              }

              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const totalCoverage = coverage.total.statements.pct;

              console.log(`Total Code Coverage: ${totalCoverage}%`);

              if (totalCoverage >= required_coverage) {
                console.log(`Code coverage (${totalCoverage}%) meets threshold (${required_coverage}%). Allowing deployment.`);
                deploy_allowed = true;
              } else {
                console.log(`Code coverage (${totalCoverage}%) is below threshold (${required_coverage}%). Skipping deployment.`);
                deploy_allowed = false;
              }
            } catch (error) {
              core.error(`Error processing coverage results: ${error.message}`);
              core.setOutput('deploy_allowed', 'false');
              core.setFailed(`Failed to process coverage results: ${error.message}`);
            }

            core.setOutput('deploy_allowed', deploy_allowed.toString());
          result-encoding: string

      # Install OIDC Client (root directory)
      - name: Install OIDC Client from Core Package
        if: steps.coverage_check.outputs.deploy_allowed == 'true'
        run: npm install @actions/core@1.6.0 @actions/http-client

      # Condition: Only run if coverage meets threshold
      - name: Get Id Token
        id: idtoken
        uses: actions/github-script@v6
        if: steps.coverage_check.outputs.deploy_allowed == 'true'
        with:
          script: |
            const coredemo = require('@actions/core')
            return await coredemo.getIDToken()
          result-encoding: string

      # Build and Deploy
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        if: steps.coverage_check.outputs.deploy_allowed == 'true'
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_WHITE_SKY_03852EA10 }}
          action: "upload"
          app_location: "./sd"
          api_location: ""
          output_location: "build" 
          github_id_token: ${{ steps.idtoken.outputs.result }}

      - name: Deployment Skipped Notification
        if: steps.coverage_check.outputs.deploy_allowed == 'false'
        run: echo "Deployment was skipped because the code coverage was below the 40% threshold."

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          action: "close"
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_WHITE_SKY_03852EA10 }}
